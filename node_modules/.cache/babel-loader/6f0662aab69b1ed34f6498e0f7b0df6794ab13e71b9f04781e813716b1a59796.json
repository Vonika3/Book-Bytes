{"ast":null,"code":"var _jsxFileName = \"/Users/vonika./Documents/React/Projects/free-programming-books-search/src/components/ParsedLink.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ParsedLink({\n  children,\n  sect,\n  href,\n  id\n}) {\n  _s();\n  const [folder, setFolder] = useState(null);\n  const [file, setFile] = useState(null);\n  useEffect(() => {\n    // Splits the original link into the folder and file names\n    // If there is only one entry then the folder is the root directory and the entry is the file\n    let hrefSplit = href.split(\"/\");\n    if (hrefSplit.length === 2) {\n      // Some docs reference back to the root directory which would give the folder \"..\"\n      // When that happens, skip setting the folder as it should stay null.\n      if (hrefSplit[0] !== \"..\") {\n        setFolder(hrefSplit[0]);\n      }\n      setFile(hrefSplit[1]);\n    } else {\n      // Only a file is given\n      setFile(hrefSplit[0]);\n      // When the current section is docs, all relative links stay in docs\n      if (sect === \"docs\") {\n        setFolder(sect);\n      } else {\n        setFolder(null);\n      }\n    }\n  }, [href]);\n  if (folder && file) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      id: id,\n      href: `/free-programming-books-search/?&sect=${folder}&file=${file}`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  } else if (file) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      id: id,\n      href: `/free-programming-books-search/?file=${file}`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  } else {\n    // Go to the homepage when there's a bad relative URL\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      id: id,\n      href: `/free-programming-books-search/`,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n}\n_s(ParsedLink, \"Mn0sJNRqiSUmk5dWBol57Efi75M=\");\n_c = ParsedLink;\nexport default ParsedLink;\nvar _c;\n$RefreshReg$(_c, \"ParsedLink\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ParsedLink","children","sect","href","id","_s","folder","setFolder","file","setFile","hrefSplit","split","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vonika./Documents/React/Projects/free-programming-books-search/src/components/ParsedLink.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction ParsedLink({ children, sect, href, id }) {\n  const [folder, setFolder] = useState(null);\n  const [file, setFile] = useState(null);\n\n  useEffect(() => {\n    // Splits the original link into the folder and file names\n    // If there is only one entry then the folder is the root directory and the entry is the file\n    let hrefSplit = href.split(\"/\");\n\n    if (hrefSplit.length === 2) {\n      // Some docs reference back to the root directory which would give the folder \"..\"\n      // When that happens, skip setting the folder as it should stay null.\n      if (hrefSplit[0] !== \"..\") {\n        setFolder(hrefSplit[0]);\n      }\n      setFile(hrefSplit[1]);\n    } else {\n      // Only a file is given\n      setFile(hrefSplit[0]);\n      // When the current section is docs, all relative links stay in docs\n      if (sect === \"docs\") {\n        setFolder(sect);\n      } else {\n        setFolder(null);\n      }\n    }\n  }, [href]);\n\n  if (folder && file) {\n    return <a id={id} href={`/free-programming-books-search/?&sect=${folder}&file=${file}`}>{children}</a>;\n  } else if (file) {\n    return <a id={id} href={`/free-programming-books-search/?file=${file}`}>{children}</a>;\n  } else { // Go to the homepage when there's a bad relative URL\n    return <a id={id} href={`/free-programming-books-search/`}>{children}</a>\n  }\n}\n\nexport default ParsedLink;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,UAAUA,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAG,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAIa,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC;IAE/B,IAAID,SAAS,CAACE,MAAM,KAAK,CAAC,EAAE;MAC1B;MACA;MACA,IAAIF,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QACzBH,SAAS,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC;MACzB;MACAD,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MACL;MACAD,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;MACrB;MACA,IAAIR,IAAI,KAAK,MAAM,EAAE;QACnBK,SAAS,CAACL,IAAI,CAAC;MACjB,CAAC,MAAM;QACLK,SAAS,CAAC,IAAI,CAAC;MACjB;IACF;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,IAAIG,MAAM,IAAIE,IAAI,EAAE;IAClB,oBAAOT,OAAA;MAAGK,EAAE,EAAEA,EAAG;MAACD,IAAI,EAAE,yCAAyCG,MAAM,SAASE,IAAI,EAAG;MAAAP,QAAA,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACxG,CAAC,MAAM,IAAIR,IAAI,EAAE;IACf,oBAAOT,OAAA;MAAGK,EAAE,EAAEA,EAAG;MAACD,IAAI,EAAE,wCAAwCK,IAAI,EAAG;MAAAP,QAAA,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACxF,CAAC,MAAM;IAAE;IACP,oBAAOjB,OAAA;MAAGK,EAAE,EAAEA,EAAG;MAACD,IAAI,EAAE,iCAAkC;MAAAF,QAAA,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC3E;AACF;AAACX,EAAA,CAnCQL,UAAU;AAAAiB,EAAA,GAAVjB,UAAU;AAqCnB,eAAeA,UAAU;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}